-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------

state 3 contains 3 shift/reduce conflicts.
state 15 contains 3 shift/reduce conflicts and 6 reduce/reduce conflicts.
state 17 contains 3 shift/reduce conflicts.
state 44 contains 4 shift/reduce conflicts.
state 45 contains 1 shift/reduce conflicts.
state 46 contains 1 shift/reduce conflicts.
state 47 contains 1 shift/reduce conflicts.
state 70 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Exp                            (0)
	Exp -> Meta Meta Meta                              (1)
	Exp -> IntExprs                                    (2)
	Meta -> set past '=' '[' MappingExps ']'           (3)
	Meta -> set pastCnt '=' int                        (4)
	Meta -> set SCount '=' int                         (5)
	Meta -> Expr                                       (6)
	Expr -> '(' Expr ')'                               (7)
	Expr -> int                                        (8)
	Expr -> var                                        (9)
	Expr -> Expr '+' Expr                              (10)
	Expr -> '+' '(' Expr ',' Expr ')'                  (11)
	Expr -> Expr '-' Expr                              (12)
	Expr -> '-' '(' Expr ',' Expr ')'                  (13)
	Expr -> Expr '*' Expr                              (14)
	Expr -> '*' '(' Expr ',' Expr ')'                  (15)
	Expr -> app '(' Expr ')' '(' Expr ')'              (16)
	Expr -> lam var '(' Expr ')'                       (17)
	Expr -> let var '=' Expr in Expr                   (18)
	Expr -> Expr eol Expr                              (19)
	MappingExps -> MappingExps ',' MappingExp          (20)
	MappingExps -> MappingExp                          (21)
	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs ']' ')'   (22)
	Exprs -> Exprs ',' Expr                            (23)
	Exprs -> Expr                                      (24)
	IntExprs -> Expr                                   (25)
	IntExprs -> IntExprs Expr                          (26)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt _ $$ }
	'='            { TokenEq _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'['            { TokenLParenSq _ }
	']'            { TokenRParenSq _ }
	','            { TokenSeq _ }
	let            { TokenLet _ }
	in             { TokenIn _ }
	var            { TokenVar _ $$ }
	lam            { TokenLam _ }
	set            { TokenSet _ }
	past           { TokenPast _ }
	pastCnt        { TokenPastCount _ }
	SCount         { TokenInStreamCount _ }
	eol            { TokenEndLine _ }
	app            { TokenApp _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Exp             rules 1, 2
	Meta            rules 3, 4, 5, 6
	Expr            rules 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
	MappingExps     rules 20, 21
	MappingExp      rule  22
	Exprs           rules 23, 24
	IntExprs        rules 25, 26

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	set            shift, and enter state 12
	app            shift, and enter state 13

	Exp            goto state 14
	Meta           goto state 2
	Expr           goto state 15
	IntExprs       goto state 16

State 1


	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	set            shift, and enter state 12
	app            shift, and enter state 13

	Meta           goto state 2
	Expr           goto state 3

State 2

	Exp -> Meta . Meta Meta                             (rule 1)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	set            shift, and enter state 12
	app            shift, and enter state 13

	Meta           goto state 32
	Expr           goto state 3

State 3

	Meta -> Expr .                                      (rule 6)
	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)

	int            reduce using rule 6
	'+'            shift, and enter state 18
			(reduce using rule 6)

	'-'            shift, and enter state 19
			(reduce using rule 6)

	'*'            shift, and enter state 20
			(reduce using rule 6)

	'('            reduce using rule 6
	let            reduce using rule 6
	var            reduce using rule 6
	lam            reduce using rule 6
	set            reduce using rule 6
	eol            shift, and enter state 21
	app            reduce using rule 6
	%eof           reduce using rule 6


State 4

	Expr -> int .                                       (rule 8)

	int            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	let            reduce using rule 8
	in             reduce using rule 8
	var            reduce using rule 8
	lam            reduce using rule 8
	set            reduce using rule 8
	eol            reduce using rule 8
	app            reduce using rule 8
	%eof           reduce using rule 8


State 5

	Expr -> '+' . '(' Expr ',' Expr ')'                 (rule 11)

	'('            shift, and enter state 31


State 6

	Expr -> '-' . '(' Expr ',' Expr ')'                 (rule 13)

	'('            shift, and enter state 30


State 7

	Expr -> '*' . '(' Expr ',' Expr ')'                 (rule 15)

	'('            shift, and enter state 29


State 8

	Expr -> '(' . Expr ')'                              (rule 7)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 28

State 9

	Expr -> let . var '=' Expr in Expr                  (rule 18)

	var            shift, and enter state 27


State 10

	Expr -> var .                                       (rule 9)

	int            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	let            reduce using rule 9
	in             reduce using rule 9
	var            reduce using rule 9
	lam            reduce using rule 9
	set            reduce using rule 9
	eol            reduce using rule 9
	app            reduce using rule 9
	%eof           reduce using rule 9


State 11

	Expr -> lam . var '(' Expr ')'                      (rule 17)

	var            shift, and enter state 26


State 12

	Meta -> set . past '=' '[' MappingExps ']'          (rule 3)
	Meta -> set . pastCnt '=' int                       (rule 4)
	Meta -> set . SCount '=' int                        (rule 5)

	past           shift, and enter state 23
	pastCnt        shift, and enter state 24
	SCount         shift, and enter state 25


State 13

	Expr -> app . '(' Expr ')' '(' Expr ')'             (rule 16)

	'('            shift, and enter state 22


State 14

	%start_parseCalc -> Exp .                           (rule 0)

	%eof           accept


State 15

	Meta -> Expr .                                      (rule 6)
	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)
	IntExprs -> Expr .                                  (rule 25)

	int            reduce using rule 25
			(reduce using rule 6)

	'+'            shift, and enter state 18
			(reduce using rule 25)
			(reduce using rule 6)

	'-'            shift, and enter state 19
			(reduce using rule 25)
			(reduce using rule 6)

	'*'            shift, and enter state 20
			(reduce using rule 25)
			(reduce using rule 6)

	'('            reduce using rule 25
			(reduce using rule 6)

	let            reduce using rule 25
			(reduce using rule 6)

	var            reduce using rule 25
			(reduce using rule 6)

	lam            reduce using rule 25
			(reduce using rule 6)

	set            reduce using rule 6
	eol            shift, and enter state 21
	app            reduce using rule 25
			(reduce using rule 6)

	%eof           reduce using rule 25


State 16

	Exp -> IntExprs .                                   (rule 2)
	IntExprs -> IntExprs . Expr                         (rule 26)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13
	%eof           reduce using rule 2

	Expr           goto state 17

State 17

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)
	IntExprs -> IntExprs Expr .                         (rule 26)

	int            reduce using rule 26
	'+'            shift, and enter state 18
			(reduce using rule 26)

	'-'            shift, and enter state 19
			(reduce using rule 26)

	'*'            shift, and enter state 20
			(reduce using rule 26)

	'('            reduce using rule 26
	let            reduce using rule 26
	var            reduce using rule 26
	lam            reduce using rule 26
	eol            shift, and enter state 21
	app            reduce using rule 26
	%eof           reduce using rule 26


State 18

	Expr -> Expr '+' . Expr                             (rule 10)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 47

State 19

	Expr -> Expr '-' . Expr                             (rule 12)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 46

State 20

	Expr -> Expr '*' . Expr                             (rule 14)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 45

State 21

	Expr -> Expr eol . Expr                             (rule 19)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 44

State 22

	Expr -> app '(' . Expr ')' '(' Expr ')'             (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 43

State 23

	Meta -> set past . '=' '[' MappingExps ']'          (rule 3)

	'='            shift, and enter state 42


State 24

	Meta -> set pastCnt . '=' int                       (rule 4)

	'='            shift, and enter state 41


State 25

	Meta -> set SCount . '=' int                        (rule 5)

	'='            shift, and enter state 40


State 26

	Expr -> lam var . '(' Expr ')'                      (rule 17)

	'('            shift, and enter state 39


State 27

	Expr -> let var . '=' Expr in Expr                  (rule 18)

	'='            shift, and enter state 38


State 28

	Expr -> '(' Expr . ')'                              (rule 7)
	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	')'            shift, and enter state 37
	eol            shift, and enter state 21


State 29

	Expr -> '*' '(' . Expr ',' Expr ')'                 (rule 15)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 36

State 30

	Expr -> '-' '(' . Expr ',' Expr ')'                 (rule 13)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 35

State 31

	Expr -> '+' '(' . Expr ',' Expr ')'                 (rule 11)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 34

State 32

	Exp -> Meta Meta . Meta                             (rule 1)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	set            shift, and enter state 12
	app            shift, and enter state 13

	Meta           goto state 33
	Expr           goto state 3

State 33

	Exp -> Meta Meta Meta .                             (rule 1)

	%eof           reduce using rule 1


State 34

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> '+' '(' Expr . ',' Expr ')'                 (rule 11)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	','            shift, and enter state 56
	eol            shift, and enter state 21


State 35

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> '-' '(' Expr . ',' Expr ')'                 (rule 13)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	','            shift, and enter state 55
	eol            shift, and enter state 21


State 36

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> '*' '(' Expr . ',' Expr ')'                 (rule 15)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	','            shift, and enter state 54
	eol            shift, and enter state 21


State 37

	Expr -> '(' Expr ')' .                              (rule 7)

	int            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	let            reduce using rule 7
	in             reduce using rule 7
	var            reduce using rule 7
	lam            reduce using rule 7
	set            reduce using rule 7
	eol            reduce using rule 7
	app            reduce using rule 7
	%eof           reduce using rule 7


State 38

	Expr -> let var '=' . Expr in Expr                  (rule 18)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 53

State 39

	Expr -> lam var '(' . Expr ')'                      (rule 17)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 52

State 40

	Meta -> set SCount '=' . int                        (rule 5)

	int            shift, and enter state 51


State 41

	Meta -> set pastCnt '=' . int                       (rule 4)

	int            shift, and enter state 50


State 42

	Meta -> set past '=' . '[' MappingExps ']'          (rule 3)

	'['            shift, and enter state 49


State 43

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> app '(' Expr . ')' '(' Expr ')'             (rule 16)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	')'            shift, and enter state 48
	eol            shift, and enter state 21


State 44

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)
	Expr -> Expr eol Expr .                             (rule 19)

	int            reduce using rule 19
	'+'            shift, and enter state 18
			(reduce using rule 19)

	'-'            shift, and enter state 19
			(reduce using rule 19)

	'*'            shift, and enter state 20
			(reduce using rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19
	let            reduce using rule 19
	in             reduce using rule 19
	var            reduce using rule 19
	lam            reduce using rule 19
	set            reduce using rule 19
	eol            shift, and enter state 21
			(reduce using rule 19)

	app            reduce using rule 19
	%eof           reduce using rule 19


State 45

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr '*' Expr .                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)

	int            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	let            reduce using rule 14
	in             reduce using rule 14
	var            reduce using rule 14
	lam            reduce using rule 14
	set            reduce using rule 14
	eol            shift, and enter state 21
			(reduce using rule 14)

	app            reduce using rule 14
	%eof           reduce using rule 14


State 46

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr '-' Expr .                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)

	int            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            shift, and enter state 20
	'('            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	let            reduce using rule 12
	in             reduce using rule 12
	var            reduce using rule 12
	lam            reduce using rule 12
	set            reduce using rule 12
	eol            shift, and enter state 21
			(reduce using rule 12)

	app            reduce using rule 12
	%eof           reduce using rule 12


State 47

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr '+' Expr .                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)

	int            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            shift, and enter state 20
	'('            reduce using rule 10
	')'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	let            reduce using rule 10
	in             reduce using rule 10
	var            reduce using rule 10
	lam            reduce using rule 10
	set            reduce using rule 10
	eol            shift, and enter state 21
			(reduce using rule 10)

	app            reduce using rule 10
	%eof           reduce using rule 10


State 48

	Expr -> app '(' Expr ')' . '(' Expr ')'             (rule 16)

	'('            shift, and enter state 65


State 49

	Meta -> set past '=' '[' . MappingExps ']'          (rule 3)

	'('            shift, and enter state 64

	MappingExps    goto state 62
	MappingExp     goto state 63

State 50

	Meta -> set pastCnt '=' int .                       (rule 4)

	int            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'('            reduce using rule 4
	let            reduce using rule 4
	var            reduce using rule 4
	lam            reduce using rule 4
	set            reduce using rule 4
	app            reduce using rule 4
	%eof           reduce using rule 4


State 51

	Meta -> set SCount '=' int .                        (rule 5)

	int            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'('            reduce using rule 5
	let            reduce using rule 5
	var            reduce using rule 5
	lam            reduce using rule 5
	set            reduce using rule 5
	app            reduce using rule 5
	%eof           reduce using rule 5


State 52

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> lam var '(' Expr . ')'                      (rule 17)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	')'            shift, and enter state 61
	eol            shift, and enter state 21


State 53

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> let var '=' Expr . in Expr                  (rule 18)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	in             shift, and enter state 60
	eol            shift, and enter state 21


State 54

	Expr -> '*' '(' Expr ',' . Expr ')'                 (rule 15)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 59

State 55

	Expr -> '-' '(' Expr ',' . Expr ')'                 (rule 13)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 58

State 56

	Expr -> '+' '(' Expr ',' . Expr ')'                 (rule 11)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 57

State 57

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> '+' '(' Expr ',' Expr . ')'                 (rule 11)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	')'            shift, and enter state 73
	eol            shift, and enter state 21


State 58

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> '-' '(' Expr ',' Expr . ')'                 (rule 13)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	')'            shift, and enter state 72
	eol            shift, and enter state 21


State 59

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> '*' '(' Expr ',' Expr . ')'                 (rule 15)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	')'            shift, and enter state 71
	eol            shift, and enter state 21


State 60

	Expr -> let var '=' Expr in . Expr                  (rule 18)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 70

State 61

	Expr -> lam var '(' Expr ')' .                      (rule 17)

	int            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	let            reduce using rule 17
	in             reduce using rule 17
	var            reduce using rule 17
	lam            reduce using rule 17
	set            reduce using rule 17
	eol            reduce using rule 17
	app            reduce using rule 17
	%eof           reduce using rule 17


State 62

	Meta -> set past '=' '[' MappingExps . ']'          (rule 3)
	MappingExps -> MappingExps . ',' MappingExp         (rule 20)

	']'            shift, and enter state 68
	','            shift, and enter state 69


State 63

	MappingExps -> MappingExp .                         (rule 21)

	']'            reduce using rule 21
	','            reduce using rule 21


State 64

	MappingExp -> '(' . '[' Exprs ']' ',' '[' Exprs ']' ')'    (rule 22)

	'['            shift, and enter state 67


State 65

	Expr -> app '(' Expr ')' '(' . Expr ')'             (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 66

State 66

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> app '(' Expr ')' '(' Expr . ')'             (rule 16)
	Expr -> Expr . eol Expr                             (rule 19)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	')'            shift, and enter state 77
	eol            shift, and enter state 21


State 67

	MappingExp -> '(' '[' . Exprs ']' ',' '[' Exprs ']' ')'    (rule 22)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 75
	Exprs          goto state 76

State 68

	Meta -> set past '=' '[' MappingExps ']' .          (rule 3)

	int            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'('            reduce using rule 3
	let            reduce using rule 3
	var            reduce using rule 3
	lam            reduce using rule 3
	set            reduce using rule 3
	app            reduce using rule 3
	%eof           reduce using rule 3


State 69

	MappingExps -> MappingExps ',' . MappingExp         (rule 20)

	'('            shift, and enter state 64

	MappingExp     goto state 74

State 70

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> let var '=' Expr in Expr .                  (rule 18)
	Expr -> Expr . eol Expr                             (rule 19)

	int            reduce using rule 18
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            reduce using rule 18
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	let            reduce using rule 18
	in             reduce using rule 18
	var            reduce using rule 18
	lam            reduce using rule 18
	set            reduce using rule 18
	eol            shift, and enter state 21
			(reduce using rule 18)

	app            reduce using rule 18
	%eof           reduce using rule 18


State 71

	Expr -> '*' '(' Expr ',' Expr ')' .                 (rule 15)

	int            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	let            reduce using rule 15
	in             reduce using rule 15
	var            reduce using rule 15
	lam            reduce using rule 15
	set            reduce using rule 15
	eol            reduce using rule 15
	app            reduce using rule 15
	%eof           reduce using rule 15


State 72

	Expr -> '-' '(' Expr ',' Expr ')' .                 (rule 13)

	int            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	let            reduce using rule 13
	in             reduce using rule 13
	var            reduce using rule 13
	lam            reduce using rule 13
	set            reduce using rule 13
	eol            reduce using rule 13
	app            reduce using rule 13
	%eof           reduce using rule 13


State 73

	Expr -> '+' '(' Expr ',' Expr ')' .                 (rule 11)

	int            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	let            reduce using rule 11
	in             reduce using rule 11
	var            reduce using rule 11
	lam            reduce using rule 11
	set            reduce using rule 11
	eol            reduce using rule 11
	app            reduce using rule 11
	%eof           reduce using rule 11


State 74

	MappingExps -> MappingExps ',' MappingExp .         (rule 20)

	']'            reduce using rule 20
	','            reduce using rule 20


State 75

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)
	Exprs -> Expr .                                     (rule 24)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	']'            reduce using rule 24
	','            reduce using rule 24
	eol            shift, and enter state 21


State 76

	MappingExp -> '(' '[' Exprs . ']' ',' '[' Exprs ']' ')'    (rule 22)
	Exprs -> Exprs . ',' Expr                           (rule 23)

	']'            shift, and enter state 78
	','            shift, and enter state 79


State 77

	Expr -> app '(' Expr ')' '(' Expr ')' .             (rule 16)

	int            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	let            reduce using rule 16
	in             reduce using rule 16
	var            reduce using rule 16
	lam            reduce using rule 16
	set            reduce using rule 16
	eol            reduce using rule 16
	app            reduce using rule 16
	%eof           reduce using rule 16


State 78

	MappingExp -> '(' '[' Exprs ']' . ',' '[' Exprs ']' ')'    (rule 22)

	','            shift, and enter state 81


State 79

	Exprs -> Exprs ',' . Expr                           (rule 23)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 80

State 80

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . eol Expr                             (rule 19)
	Exprs -> Exprs ',' Expr .                           (rule 23)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	']'            reduce using rule 23
	','            reduce using rule 23
	eol            shift, and enter state 21


State 81

	MappingExp -> '(' '[' Exprs ']' ',' . '[' Exprs ']' ')'    (rule 22)

	'['            shift, and enter state 82


State 82

	MappingExp -> '(' '[' Exprs ']' ',' '[' . Exprs ']' ')'    (rule 22)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	app            shift, and enter state 13

	Expr           goto state 75
	Exprs          goto state 83

State 83

	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs . ']' ')'    (rule 22)
	Exprs -> Exprs . ',' Expr                           (rule 23)

	']'            shift, and enter state 84
	','            shift, and enter state 79


State 84

	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs ']' . ')'    (rule 22)

	')'            shift, and enter state 85


State 85

	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs ']' ')' .    (rule 22)

	']'            reduce using rule 22
	','            reduce using rule 22


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 27
Number of terminals: 20
Number of non-terminals: 8
Number of states: 86

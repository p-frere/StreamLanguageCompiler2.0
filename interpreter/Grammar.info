-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------


terminal '[' is unused
terminal ']' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Ex                             (0)
	Ex -> Exp                                          (1)
	Integer -> int                                     (2)
	Exp -> '(' Exp ')'                                 (3)
	Exp -> Integer                                     (4)
	Exp -> var                                         (5)
	Exp -> Exp '+' Exp                                 (6)
	Exp -> sum '(' Exp ',' Exp ')'                     (7)
	Exp -> Exp '-' Exp                                 (8)
	Exp -> sub '(' Exp ',' Exp ')'                     (9)
	Exp -> Exp '*' Exp                                 (10)
	Exp -> mult '(' Exp ',' Exp ')'                    (11)
	Exp -> Exp Exp                                     (12)
	Exp -> lam var '(' Exp ')'                         (13)
	Exp -> let var '=' Exp in Exp                      (14)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt _ $$ }
	'='            { TokenEq _ }
	'+'            { TokenPlus _ }
	sum            { TokenPlus _ }
	'-'            { TokenMinus _ }
	sub            { TokenMinus _ }
	'*'            { TokenTimes _ }
	mult           { TokenTimes _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'['            { TokenLParenSq _ }
	']'            { TokenRParenSq _ }
	','            { TokenSeq _ }
	let            { TokenLet _ }
	in             { TokenIn _ }
	var            { TokenVar _ $$ }
	lam            { TokenLam _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Ex              rule  1
	Integer         rule  2
	Exp             rules 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Ex             goto state 12
	Integer        goto state 2
	Exp            goto state 3

State 1


	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 3

State 2

	Exp -> Integer .                                    (rule 4)

	int            reduce using rule 4
	'+'            reduce using rule 4
	sum            reduce using rule 4
	'-'            reduce using rule 4
	sub            reduce using rule 4
	'*'            reduce using rule 4
	mult           reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	','            reduce using rule 4
	let            reduce using rule 4
	in             reduce using rule 4
	var            reduce using rule 4
	lam            reduce using rule 4
	%eof           reduce using rule 4


State 3

	Ex -> Exp .                                         (rule 1)
	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)

	int            shift, and enter state 4
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	%eof           reduce using rule 1

	Integer        goto state 2
	Exp            goto state 19

State 4

	Integer -> int .                                    (rule 2)

	int            reduce using rule 2
	'+'            reduce using rule 2
	sum            reduce using rule 2
	'-'            reduce using rule 2
	sub            reduce using rule 2
	'*'            reduce using rule 2
	mult           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	','            reduce using rule 2
	let            reduce using rule 2
	in             reduce using rule 2
	var            reduce using rule 2
	lam            reduce using rule 2
	%eof           reduce using rule 2


State 5

	Exp -> sum . '(' Exp ',' Exp ')'                    (rule 7)

	'('            shift, and enter state 18


State 6

	Exp -> sub . '(' Exp ',' Exp ')'                    (rule 9)

	'('            shift, and enter state 17


State 7

	Exp -> mult . '(' Exp ',' Exp ')'                   (rule 11)

	'('            shift, and enter state 16


State 8

	Exp -> '(' . Exp ')'                                (rule 3)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 15

State 9

	Exp -> let . var '=' Exp in Exp                     (rule 14)

	var            shift, and enter state 14


State 10

	Exp -> var .                                        (rule 5)

	int            reduce using rule 5
	'+'            reduce using rule 5
	sum            reduce using rule 5
	'-'            reduce using rule 5
	sub            reduce using rule 5
	'*'            reduce using rule 5
	mult           reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	','            reduce using rule 5
	let            reduce using rule 5
	in             reduce using rule 5
	var            reduce using rule 5
	lam            reduce using rule 5
	%eof           reduce using rule 5


State 11

	Exp -> lam . var '(' Exp ')'                        (rule 13)

	var            shift, and enter state 13


State 12

	%start_parseCalc -> Ex .                            (rule 0)

	%eof           accept


State 13

	Exp -> lam var . '(' Exp ')'                        (rule 13)

	'('            shift, and enter state 31


State 14

	Exp -> let var . '=' Exp in Exp                     (rule 14)

	'='            shift, and enter state 30


State 15

	Exp -> '(' Exp . ')'                                (rule 3)
	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)

	int            shift, and enter state 4
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	')'            shift, and enter state 29
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 19

State 16

	Exp -> mult '(' . Exp ',' Exp ')'                   (rule 11)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 28

State 17

	Exp -> sub '(' . Exp ',' Exp ')'                    (rule 9)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 27

State 18

	Exp -> sum '(' . Exp ',' Exp ')'                    (rule 7)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 26

State 19

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)
	Exp -> Exp Exp .                                    (rule 12)

	int            reduce using rule 12
	'+'            reduce using rule 12
	sum            reduce using rule 12
	'-'            reduce using rule 12
	sub            reduce using rule 12
	'*'            reduce using rule 12
	mult           reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	','            reduce using rule 12
	let            reduce using rule 12
	in             reduce using rule 12
	var            reduce using rule 12
	lam            reduce using rule 12
	%eof           reduce using rule 12

	Integer        goto state 2
	Exp            goto state 19

State 20

	Exp -> Exp '+' . Exp                                (rule 6)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 25

State 21

	Exp -> Exp '-' . Exp                                (rule 8)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 24

State 22

	Exp -> Exp '*' . Exp                                (rule 10)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 23

State 23

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp '*' Exp .                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)

	int            reduce using rule 10
	'+'            reduce using rule 10
	sum            reduce using rule 10
	'-'            reduce using rule 10
	sub            reduce using rule 10
	'*'            reduce using rule 10
	mult           reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	','            reduce using rule 10
	let            shift, and enter state 9
	in             reduce using rule 10
	var            reduce using rule 10
	lam            shift, and enter state 11
	%eof           reduce using rule 10

	Integer        goto state 2
	Exp            goto state 19

State 24

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp '-' Exp .                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)

	int            reduce using rule 8
	'+'            reduce using rule 8
	sum            reduce using rule 8
	'-'            reduce using rule 8
	sub            reduce using rule 8
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            reduce using rule 8
	')'            reduce using rule 8
	','            reduce using rule 8
	let            shift, and enter state 9
	in             reduce using rule 8
	var            reduce using rule 8
	lam            shift, and enter state 11
	%eof           reduce using rule 8

	Integer        goto state 2
	Exp            goto state 19

State 25

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp '+' Exp .                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)

	int            reduce using rule 6
	'+'            reduce using rule 6
	sum            reduce using rule 6
	'-'            reduce using rule 6
	sub            reduce using rule 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            reduce using rule 6
	')'            reduce using rule 6
	','            reduce using rule 6
	let            shift, and enter state 9
	in             reduce using rule 6
	var            reduce using rule 6
	lam            shift, and enter state 11
	%eof           reduce using rule 6

	Integer        goto state 2
	Exp            goto state 19

State 26

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> sum '(' Exp . ',' Exp ')'                    (rule 7)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)

	int            shift, and enter state 4
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	','            shift, and enter state 36
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 19

State 27

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> sub '(' Exp . ',' Exp ')'                    (rule 9)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)

	int            shift, and enter state 4
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	','            shift, and enter state 35
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 19

State 28

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> mult '(' Exp . ',' Exp ')'                   (rule 11)
	Exp -> Exp . Exp                                    (rule 12)

	int            shift, and enter state 4
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	','            shift, and enter state 34
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 19

State 29

	Exp -> '(' Exp ')' .                                (rule 3)

	int            reduce using rule 3
	'+'            reduce using rule 3
	sum            reduce using rule 3
	'-'            reduce using rule 3
	sub            reduce using rule 3
	'*'            reduce using rule 3
	mult           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	let            reduce using rule 3
	in             reduce using rule 3
	var            reduce using rule 3
	lam            reduce using rule 3
	%eof           reduce using rule 3


State 30

	Exp -> let var '=' . Exp in Exp                     (rule 14)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 33

State 31

	Exp -> lam var '(' . Exp ')'                        (rule 13)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 32

State 32

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)
	Exp -> lam var '(' Exp . ')'                        (rule 13)

	int            shift, and enter state 4
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	')'            shift, and enter state 41
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 19

State 33

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)
	Exp -> let var '=' Exp . in Exp                     (rule 14)

	int            shift, and enter state 4
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	in             shift, and enter state 40
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 19

State 34

	Exp -> mult '(' Exp ',' . Exp ')'                   (rule 11)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 39

State 35

	Exp -> sub '(' Exp ',' . Exp ')'                    (rule 9)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 38

State 36

	Exp -> sum '(' Exp ',' . Exp ')'                    (rule 7)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 37

State 37

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> sum '(' Exp ',' Exp . ')'                    (rule 7)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)

	int            shift, and enter state 4
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	')'            shift, and enter state 45
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 19

State 38

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> sub '(' Exp ',' Exp . ')'                    (rule 9)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)

	int            shift, and enter state 4
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	')'            shift, and enter state 44
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 19

State 39

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> mult '(' Exp ',' Exp . ')'                   (rule 11)
	Exp -> Exp . Exp                                    (rule 12)

	int            shift, and enter state 4
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	')'            shift, and enter state 43
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 19

State 40

	Exp -> let var '=' Exp in . Exp                     (rule 14)

	int            shift, and enter state 4
	sum            shift, and enter state 5
	sub            shift, and enter state 6
	mult           shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Integer        goto state 2
	Exp            goto state 42

State 41

	Exp -> lam var '(' Exp ')' .                        (rule 13)

	int            reduce using rule 13
	'+'            reduce using rule 13
	sum            reduce using rule 13
	'-'            reduce using rule 13
	sub            reduce using rule 13
	'*'            reduce using rule 13
	mult           reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	','            reduce using rule 13
	let            reduce using rule 13
	in             reduce using rule 13
	var            reduce using rule 13
	lam            reduce using rule 13
	%eof           reduce using rule 13


State 42

	Exp -> Exp . '+' Exp                                (rule 6)
	Exp -> Exp . '-' Exp                                (rule 8)
	Exp -> Exp . '*' Exp                                (rule 10)
	Exp -> Exp . Exp                                    (rule 12)
	Exp -> let var '=' Exp in Exp .                     (rule 14)

	int            fail
	'+'            shift, and enter state 20
	sum            shift, and enter state 5
	'-'            shift, and enter state 21
	sub            shift, and enter state 6
	'*'            shift, and enter state 22
	mult           shift, and enter state 7
	'('            fail
	')'            reduce using rule 14
	','            reduce using rule 14
	let            shift, and enter state 9
	in             reduce using rule 14
	var            fail
	lam            shift, and enter state 11
	%eof           reduce using rule 14

	Integer        goto state 2
	Exp            goto state 19

State 43

	Exp -> mult '(' Exp ',' Exp ')' .                   (rule 11)

	int            reduce using rule 11
	'+'            reduce using rule 11
	sum            reduce using rule 11
	'-'            reduce using rule 11
	sub            reduce using rule 11
	'*'            reduce using rule 11
	mult           reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	','            reduce using rule 11
	let            reduce using rule 11
	in             reduce using rule 11
	var            reduce using rule 11
	lam            reduce using rule 11
	%eof           reduce using rule 11


State 44

	Exp -> sub '(' Exp ',' Exp ')' .                    (rule 9)

	int            reduce using rule 9
	'+'            reduce using rule 9
	sum            reduce using rule 9
	'-'            reduce using rule 9
	sub            reduce using rule 9
	'*'            reduce using rule 9
	mult           reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	','            reduce using rule 9
	let            reduce using rule 9
	in             reduce using rule 9
	var            reduce using rule 9
	lam            reduce using rule 9
	%eof           reduce using rule 9


State 45

	Exp -> sum '(' Exp ',' Exp ')' .                    (rule 7)

	int            reduce using rule 7
	'+'            reduce using rule 7
	sum            reduce using rule 7
	'-'            reduce using rule 7
	sub            reduce using rule 7
	'*'            reduce using rule 7
	mult           reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	','            reduce using rule 7
	let            reduce using rule 7
	in             reduce using rule 7
	var            reduce using rule 7
	lam            reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 15
Number of terminals: 17
Number of non-terminals: 4
Number of states: 46

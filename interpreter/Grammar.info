-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------


terminal set is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> MetaData                       (0)
	MetaData -> '[' Meta ']' '[' Meta ']' '[' Meta ']'   (1)
	Meta -> past '=' '[' MappingExps ']'               (2)
	Meta -> pastCnt '=' int                            (3)
	Meta -> SCount '=' '(' int ')'                     (4)
	Meta -> Expr                                       (5)
	Expr -> '(' Expr ')'                               (6)
	Expr -> int                                        (7)
	Expr -> var                                        (8)
	Expr -> Expr '+' Expr                              (9)
	Expr -> '+' '(' Expr ',' Expr ')'                  (10)
	Expr -> Expr '-' Expr                              (11)
	Expr -> '-' '(' Expr ',' Expr ')'                  (12)
	Expr -> Expr '*' Expr                              (13)
	Expr -> '*' '(' Expr ',' Expr ')'                  (14)
	Expr -> Expr Expr                                  (15)
	Expr -> lam var '(' Expr ')'                       (16)
	Expr -> let var '=' Expr in Expr                   (17)
	MappingExps -> MappingExps ',' MappingExp          (18)
	MappingExps -> MappingExp                          (19)
	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs ']' ')'   (20)
	Exprs -> Exprs ',' Expr                            (21)
	Exprs -> Expr                                      (22)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt _ $$ }
	'='            { TokenEq _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'['            { TokenLParenSq _ }
	']'            { TokenRParenSq _ }
	','            { TokenSeq _ }
	let            { TokenLet _ }
	in             { TokenIn _ }
	var            { TokenVar _ $$ }
	lam            { TokenLam _ }
	set            { TokenSet _ }
	past           { TokenPast _ }
	pastCnt        { TokenPastCount _ }
	SCount         { TokenInStreamCount _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	MetaData        rule  1
	Meta            rules 2, 3, 4, 5
	Expr            rules 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
	MappingExps     rules 18, 19
	MappingExp      rule  20
	Exprs           rules 21, 22

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'['            shift, and enter state 2

	MetaData       goto state 3

State 1


	'['            shift, and enter state 2


State 2

	MetaData -> '[' . Meta ']' '[' Meta ']' '[' Meta ']'    (rule 1)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13
	past           shift, and enter state 14
	pastCnt        shift, and enter state 15
	SCount         shift, and enter state 16

	Meta           goto state 4
	Expr           goto state 5

State 3

	%start_parseCalc -> MetaData .                      (rule 0)

	%eof           accept


State 4

	MetaData -> '[' Meta . ']' '[' Meta ']' '[' Meta ']'    (rule 1)

	']'            shift, and enter state 30


State 5

	Meta -> Expr .                                      (rule 5)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	']'            reduce using rule 5
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 6

	Expr -> int .                                       (rule 7)

	int            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	let            reduce using rule 7
	in             reduce using rule 7
	var            reduce using rule 7
	lam            reduce using rule 7


State 7

	Expr -> '+' . '(' Expr ',' Expr ')'                 (rule 10)

	'('            shift, and enter state 25


State 8

	Expr -> '-' . '(' Expr ',' Expr ')'                 (rule 12)

	'('            shift, and enter state 24


State 9

	Expr -> '*' . '(' Expr ',' Expr ')'                 (rule 14)

	'('            shift, and enter state 23


State 10

	Expr -> '(' . Expr ')'                              (rule 6)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 22

State 11

	Expr -> let . var '=' Expr in Expr                  (rule 17)

	var            shift, and enter state 21


State 12

	Expr -> var .                                       (rule 8)

	int            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	let            reduce using rule 8
	in             reduce using rule 8
	var            reduce using rule 8
	lam            reduce using rule 8


State 13

	Expr -> lam . var '(' Expr ')'                      (rule 16)

	var            shift, and enter state 20


State 14

	Meta -> past . '=' '[' MappingExps ']'              (rule 2)

	'='            shift, and enter state 19


State 15

	Meta -> pastCnt . '=' int                           (rule 3)

	'='            shift, and enter state 18


State 16

	Meta -> SCount . '=' '(' int ')'                    (rule 4)

	'='            shift, and enter state 17


State 17

	Meta -> SCount '=' . '(' int ')'                    (rule 4)

	'('            shift, and enter state 46


State 18

	Meta -> pastCnt '=' . int                           (rule 3)

	int            shift, and enter state 45


State 19

	Meta -> past '=' . '[' MappingExps ']'              (rule 2)

	'['            shift, and enter state 44


State 20

	Expr -> lam var . '(' Expr ')'                      (rule 16)

	'('            shift, and enter state 43


State 21

	Expr -> let var . '=' Expr in Expr                  (rule 17)

	'='            shift, and enter state 42


State 22

	Expr -> '(' Expr . ')'                              (rule 6)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	')'            shift, and enter state 41
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 23

	Expr -> '*' '(' . Expr ',' Expr ')'                 (rule 14)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 40

State 24

	Expr -> '-' '(' . Expr ',' Expr ')'                 (rule 12)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 39

State 25

	Expr -> '+' '(' . Expr ',' Expr ')'                 (rule 10)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 38

State 26

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)
	Expr -> Expr Expr .                                 (rule 15)

	int            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	let            reduce using rule 15
	in             reduce using rule 15
	var            reduce using rule 15
	lam            reduce using rule 15

	Expr           goto state 26

State 27

	Expr -> Expr '+' . Expr                             (rule 9)
	Expr -> '+' . '(' Expr ',' Expr ')'                 (rule 10)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 37
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 36

State 28

	Expr -> Expr '-' . Expr                             (rule 11)
	Expr -> '-' . '(' Expr ',' Expr ')'                 (rule 12)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 35
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 34

State 29

	Expr -> Expr '*' . Expr                             (rule 13)
	Expr -> '*' . '(' Expr ',' Expr ')'                 (rule 14)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 33
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 32

State 30

	MetaData -> '[' Meta ']' . '[' Meta ']' '[' Meta ']'    (rule 1)

	'['            shift, and enter state 31


State 31

	MetaData -> '[' Meta ']' '[' . Meta ']' '[' Meta ']'    (rule 1)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13
	past           shift, and enter state 14
	pastCnt        shift, and enter state 15
	SCount         shift, and enter state 16

	Meta           goto state 59
	Expr           goto state 5

State 32

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr '*' Expr .                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	let            shift, and enter state 11
	in             reduce using rule 13
	var            reduce using rule 13
	lam            shift, and enter state 13

	Expr           goto state 26

State 33

	Expr -> '(' . Expr ')'                              (rule 6)
	Expr -> '*' '(' . Expr ',' Expr ')'                 (rule 14)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 58

State 34

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr '-' Expr .                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            shift, and enter state 29
	'('            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	let            shift, and enter state 11
	in             reduce using rule 11
	var            reduce using rule 11
	lam            shift, and enter state 13

	Expr           goto state 26

State 35

	Expr -> '(' . Expr ')'                              (rule 6)
	Expr -> '-' '(' . Expr ',' Expr ')'                 (rule 12)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 57

State 36

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr '+' Expr .                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            shift, and enter state 29
	'('            reduce using rule 9
	')'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	let            shift, and enter state 11
	in             reduce using rule 9
	var            reduce using rule 9
	lam            shift, and enter state 13

	Expr           goto state 26

State 37

	Expr -> '(' . Expr ')'                              (rule 6)
	Expr -> '+' '(' . Expr ',' Expr ')'                 (rule 10)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 56

State 38

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> '+' '(' Expr . ',' Expr ')'                 (rule 10)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	','            shift, and enter state 55
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 39

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> '-' '(' Expr . ',' Expr ')'                 (rule 12)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	','            shift, and enter state 54
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 40

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> '*' '(' Expr . ',' Expr ')'                 (rule 14)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	','            shift, and enter state 53
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 41

	Expr -> '(' Expr ')' .                              (rule 6)

	int            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	']'            reduce using rule 6
	','            reduce using rule 6
	let            reduce using rule 6
	in             reduce using rule 6
	var            reduce using rule 6
	lam            reduce using rule 6


State 42

	Expr -> let var '=' . Expr in Expr                  (rule 17)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 52

State 43

	Expr -> lam var '(' . Expr ')'                      (rule 16)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 51

State 44

	Meta -> past '=' '[' . MappingExps ']'              (rule 2)

	'('            shift, and enter state 50

	MappingExps    goto state 48
	MappingExp     goto state 49

State 45

	Meta -> pastCnt '=' int .                           (rule 3)

	']'            reduce using rule 3


State 46

	Meta -> SCount '=' '(' . int ')'                    (rule 4)

	int            shift, and enter state 47


State 47

	Meta -> SCount '=' '(' int . ')'                    (rule 4)

	')'            shift, and enter state 69


State 48

	Meta -> past '=' '[' MappingExps . ']'              (rule 2)
	MappingExps -> MappingExps . ',' MappingExp         (rule 18)

	']'            shift, and enter state 67
	','            shift, and enter state 68


State 49

	MappingExps -> MappingExp .                         (rule 19)

	']'            reduce using rule 19
	','            reduce using rule 19


State 50

	MappingExp -> '(' . '[' Exprs ']' ',' '[' Exprs ']' ')'    (rule 20)

	'['            shift, and enter state 66


State 51

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)
	Expr -> lam var '(' Expr . ')'                      (rule 16)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	')'            shift, and enter state 65
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 52

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)
	Expr -> let var '=' Expr . in Expr                  (rule 17)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	let            shift, and enter state 11
	in             shift, and enter state 64
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 53

	Expr -> '*' '(' Expr ',' . Expr ')'                 (rule 14)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 63

State 54

	Expr -> '-' '(' Expr ',' . Expr ')'                 (rule 12)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 62

State 55

	Expr -> '+' '(' Expr ',' . Expr ')'                 (rule 10)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 61

State 56

	Expr -> '(' Expr . ')'                              (rule 6)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> '+' '(' Expr . ',' Expr ')'                 (rule 10)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	')'            shift, and enter state 41
	','            shift, and enter state 55
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 57

	Expr -> '(' Expr . ')'                              (rule 6)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> '-' '(' Expr . ',' Expr ')'                 (rule 12)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	')'            shift, and enter state 41
	','            shift, and enter state 54
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 58

	Expr -> '(' Expr . ')'                              (rule 6)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> '*' '(' Expr . ',' Expr ')'                 (rule 14)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	')'            shift, and enter state 41
	','            shift, and enter state 53
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 59

	MetaData -> '[' Meta ']' '[' Meta . ']' '[' Meta ']'    (rule 1)

	']'            shift, and enter state 60


State 60

	MetaData -> '[' Meta ']' '[' Meta ']' . '[' Meta ']'    (rule 1)

	'['            shift, and enter state 77


State 61

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> '+' '(' Expr ',' Expr . ')'                 (rule 10)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	')'            shift, and enter state 76
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 62

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> '-' '(' Expr ',' Expr . ')'                 (rule 12)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	')'            shift, and enter state 75
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 63

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> '*' '(' Expr ',' Expr . ')'                 (rule 14)
	Expr -> Expr . Expr                                 (rule 15)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	')'            shift, and enter state 74
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 64

	Expr -> let var '=' Expr in . Expr                  (rule 17)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 73

State 65

	Expr -> lam var '(' Expr ')' .                      (rule 16)

	int            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	let            reduce using rule 16
	in             reduce using rule 16
	var            reduce using rule 16
	lam            reduce using rule 16


State 66

	MappingExp -> '(' '[' . Exprs ']' ',' '[' Exprs ']' ')'    (rule 20)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 71
	Exprs          goto state 72

State 67

	Meta -> past '=' '[' MappingExps ']' .              (rule 2)

	']'            reduce using rule 2


State 68

	MappingExps -> MappingExps ',' . MappingExp         (rule 18)

	'('            shift, and enter state 50

	MappingExp     goto state 70

State 69

	Meta -> SCount '=' '(' int ')' .                    (rule 4)

	']'            reduce using rule 4


State 70

	MappingExps -> MappingExps ',' MappingExp .         (rule 18)

	']'            reduce using rule 18
	','            reduce using rule 18


State 71

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)
	Exprs -> Expr .                                     (rule 22)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	']'            reduce using rule 22
	','            reduce using rule 22
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 72

	MappingExp -> '(' '[' Exprs . ']' ',' '[' Exprs ']' ')'    (rule 20)
	Exprs -> Exprs . ',' Expr                           (rule 21)

	']'            shift, and enter state 79
	','            shift, and enter state 80


State 73

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)
	Expr -> let var '=' Expr in Expr .                  (rule 17)

	int            fail
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            fail
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	let            shift, and enter state 11
	in             reduce using rule 17
	var            fail
	lam            shift, and enter state 13

	Expr           goto state 26

State 74

	Expr -> '*' '(' Expr ',' Expr ')' .                 (rule 14)

	int            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	let            reduce using rule 14
	in             reduce using rule 14
	var            reduce using rule 14
	lam            reduce using rule 14


State 75

	Expr -> '-' '(' Expr ',' Expr ')' .                 (rule 12)

	int            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	let            reduce using rule 12
	in             reduce using rule 12
	var            reduce using rule 12
	lam            reduce using rule 12


State 76

	Expr -> '+' '(' Expr ',' Expr ')' .                 (rule 10)

	int            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	let            reduce using rule 10
	in             reduce using rule 10
	var            reduce using rule 10
	lam            reduce using rule 10


State 77

	MetaData -> '[' Meta ']' '[' Meta ']' '[' . Meta ']'    (rule 1)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13
	past           shift, and enter state 14
	pastCnt        shift, and enter state 15
	SCount         shift, and enter state 16

	Meta           goto state 78
	Expr           goto state 5

State 78

	MetaData -> '[' Meta ']' '[' Meta ']' '[' Meta . ']'    (rule 1)

	']'            shift, and enter state 83


State 79

	MappingExp -> '(' '[' Exprs ']' . ',' '[' Exprs ']' ')'    (rule 20)

	','            shift, and enter state 82


State 80

	Exprs -> Exprs ',' . Expr                           (rule 21)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 81

State 81

	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 11)
	Expr -> Expr . '*' Expr                             (rule 13)
	Expr -> Expr . Expr                                 (rule 15)
	Exprs -> Exprs ',' Expr .                           (rule 21)

	int            shift, and enter state 6
	'+'            shift, and enter state 27
	'-'            shift, and enter state 28
	'*'            shift, and enter state 29
	'('            shift, and enter state 10
	']'            reduce using rule 21
	','            reduce using rule 21
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 26

State 82

	MappingExp -> '(' '[' Exprs ']' ',' . '[' Exprs ']' ')'    (rule 20)

	'['            shift, and enter state 84


State 83

	MetaData -> '[' Meta ']' '[' Meta ']' '[' Meta ']' .    (rule 1)

	%eof           reduce using rule 1


State 84

	MappingExp -> '(' '[' Exprs ']' ',' '[' . Exprs ']' ')'    (rule 20)

	int            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	let            shift, and enter state 11
	var            shift, and enter state 12
	lam            shift, and enter state 13

	Expr           goto state 71
	Exprs          goto state 85

State 85

	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs . ']' ')'    (rule 20)
	Exprs -> Exprs . ',' Expr                           (rule 21)

	']'            shift, and enter state 86
	','            shift, and enter state 80


State 86

	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs ']' . ')'    (rule 20)

	')'            shift, and enter state 87


State 87

	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs ']' ')' .    (rule 20)

	']'            reduce using rule 20
	','            reduce using rule 20


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 23
Number of terminals: 18
Number of non-terminals: 7
Number of states: 88

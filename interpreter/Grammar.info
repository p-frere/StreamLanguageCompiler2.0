-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------

state 4 contains 8 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Ex                             (0)
	Ex -> MetaExp MetaExp MetaExp                      (1)
	MetaExp -> set past '=' PastExp                    (2)
	MetaExp -> set inStreamCount '=' int               (3)
	MetaExp -> set pastCount '=' int                   (4)
	MetaExp -> Exp                                     (5)
	Integer -> int                                     (6)
	Exp -> '(' Exp ')'                                 (7)
	Exp -> Integer                                     (8)
	Exp -> var                                         (9)
	Exp -> Exp '+' Exp                                 (10)
	Exp -> sum '(' Exp ',' Exp ')'                     (11)
	Exp -> Exp '-' Exp                                 (12)
	Exp -> sub '(' Exp ',' Exp ')'                     (13)
	Exp -> Exp '*' Exp                                 (14)
	Exp -> mult '(' Exp ',' Exp ')'                    (15)
	Exp -> Exp Exp                                     (16)
	Exp -> lam var '(' Exp ')'                         (17)
	Exp -> let var '=' Exp in Exp                      (18)
	PastExp -> '[' MappingExps ']'                     (19)
	MappingExps -> MappingExps ',' MappingExp          (20)
	MappingExps -> MappingExp                          (21)
	MappingExp -> '(' '[' Exps ']' ',' '[' Exps ']' ')'   (22)
	Exps -> Exps ',' Exp                               (23)
	Exps -> Exp                                        (24)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt _ $$ }
	'='            { TokenEq _ }
	'+'            { TokenPlus _ }
	sum            { TokenPlus _ }
	'-'            { TokenMinus _ }
	sub            { TokenMinus _ }
	'*'            { TokenTimes _ }
	mult           { TokenTimes _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'['            { TokenLParenSq _ }
	']'            { TokenRParenSq _ }
	','            { TokenSeq _ }
	let            { TokenLet _ }
	in             { TokenIn _ }
	var            { TokenVar _ $$ }
	lam            { TokenLam _ }
	set            { TokenSet _ }
	past           { TokenPast _ }
	pastCount      { TokenPastCount _ }
	inStreamCount  { TokenInStreamCount _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Ex              rule  1
	MetaExp         rules 2, 3, 4, 5
	Integer         rule  6
	Exp             rules 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
	PastExp         rule  19
	MappingExps     rules 20, 21
	MappingExp      rule  22
	Exps            rules 23, 24

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12
	set            shift, and enter state 13

	Ex             goto state 14
	MetaExp        goto state 2
	Integer        goto state 3
	Exp            goto state 4

State 1


	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12
	set            shift, and enter state 13

	MetaExp        goto state 2
	Integer        goto state 3
	Exp            goto state 4

State 2

	Ex -> MetaExp . MetaExp MetaExp                     (rule 1)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12
	set            shift, and enter state 13

	MetaExp        goto state 28
	Integer        goto state 3
	Exp            goto state 4

State 3

	Exp -> Integer .                                    (rule 8)

	int            reduce using rule 8
	'+'            reduce using rule 8
	sum            reduce using rule 8
	'-'            reduce using rule 8
	sub            reduce using rule 8
	'*'            reduce using rule 8
	mult           reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	let            reduce using rule 8
	in             reduce using rule 8
	var            reduce using rule 8
	lam            reduce using rule 8
	set            reduce using rule 8
	%eof           reduce using rule 8


State 4

	MetaExp -> Exp .                                    (rule 5)
	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)

	int            shift, and enter state 5
			(reduce using rule 5)

	'+'            shift, and enter state 25
	sum            shift, and enter state 6
			(reduce using rule 5)

	'-'            shift, and enter state 26
	sub            shift, and enter state 7
			(reduce using rule 5)

	'*'            shift, and enter state 27
	mult           shift, and enter state 8
			(reduce using rule 5)

	'('            shift, and enter state 9
			(reduce using rule 5)

	let            shift, and enter state 10
			(reduce using rule 5)

	var            shift, and enter state 11
			(reduce using rule 5)

	lam            shift, and enter state 12
			(reduce using rule 5)

	set            reduce using rule 5
	%eof           reduce using rule 5

	Integer        goto state 3
	Exp            goto state 24

State 5

	Integer -> int .                                    (rule 6)

	int            reduce using rule 6
	'+'            reduce using rule 6
	sum            reduce using rule 6
	'-'            reduce using rule 6
	sub            reduce using rule 6
	'*'            reduce using rule 6
	mult           reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	']'            reduce using rule 6
	','            reduce using rule 6
	let            reduce using rule 6
	in             reduce using rule 6
	var            reduce using rule 6
	lam            reduce using rule 6
	set            reduce using rule 6
	%eof           reduce using rule 6


State 6

	Exp -> sum . '(' Exp ',' Exp ')'                    (rule 11)

	'('            shift, and enter state 23


State 7

	Exp -> sub . '(' Exp ',' Exp ')'                    (rule 13)

	'('            shift, and enter state 22


State 8

	Exp -> mult . '(' Exp ',' Exp ')'                   (rule 15)

	'('            shift, and enter state 21


State 9

	Exp -> '(' . Exp ')'                                (rule 7)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 20

State 10

	Exp -> let . var '=' Exp in Exp                     (rule 18)

	var            shift, and enter state 19


State 11

	Exp -> var .                                        (rule 9)

	int            reduce using rule 9
	'+'            reduce using rule 9
	sum            reduce using rule 9
	'-'            reduce using rule 9
	sub            reduce using rule 9
	'*'            reduce using rule 9
	mult           reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	let            reduce using rule 9
	in             reduce using rule 9
	var            reduce using rule 9
	lam            reduce using rule 9
	set            reduce using rule 9
	%eof           reduce using rule 9


State 12

	Exp -> lam . var '(' Exp ')'                        (rule 17)

	var            shift, and enter state 18


State 13

	MetaExp -> set . past '=' PastExp                   (rule 2)
	MetaExp -> set . inStreamCount '=' int              (rule 3)
	MetaExp -> set . pastCount '=' int                  (rule 4)

	past           shift, and enter state 15
	pastCount      shift, and enter state 16
	inStreamCount  shift, and enter state 17


State 14

	%start_parseCalc -> Ex .                            (rule 0)

	%eof           accept


State 15

	MetaExp -> set past . '=' PastExp                   (rule 2)

	'='            shift, and enter state 41


State 16

	MetaExp -> set pastCount . '=' int                  (rule 4)

	'='            shift, and enter state 40


State 17

	MetaExp -> set inStreamCount . '=' int              (rule 3)

	'='            shift, and enter state 39


State 18

	Exp -> lam var . '(' Exp ')'                        (rule 17)

	'('            shift, and enter state 38


State 19

	Exp -> let var . '=' Exp in Exp                     (rule 18)

	'='            shift, and enter state 37


State 20

	Exp -> '(' Exp . ')'                                (rule 7)
	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	')'            shift, and enter state 36
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 21

	Exp -> mult '(' . Exp ',' Exp ')'                   (rule 15)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 35

State 22

	Exp -> sub '(' . Exp ',' Exp ')'                    (rule 13)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 34

State 23

	Exp -> sum '(' . Exp ',' Exp ')'                    (rule 11)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 33

State 24

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)
	Exp -> Exp Exp .                                    (rule 16)

	int            reduce using rule 16
	'+'            reduce using rule 16
	sum            reduce using rule 16
	'-'            reduce using rule 16
	sub            reduce using rule 16
	'*'            reduce using rule 16
	mult           reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	let            reduce using rule 16
	in             reduce using rule 16
	var            reduce using rule 16
	lam            reduce using rule 16
	set            reduce using rule 16
	%eof           reduce using rule 16

	Integer        goto state 3
	Exp            goto state 24

State 25

	Exp -> Exp '+' . Exp                                (rule 10)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 32

State 26

	Exp -> Exp '-' . Exp                                (rule 12)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 31

State 27

	Exp -> Exp '*' . Exp                                (rule 14)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 30

State 28

	Ex -> MetaExp MetaExp . MetaExp                     (rule 1)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12
	set            shift, and enter state 13

	MetaExp        goto state 29
	Integer        goto state 3
	Exp            goto state 4

State 29

	Ex -> MetaExp MetaExp MetaExp .                     (rule 1)

	%eof           reduce using rule 1


State 30

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp '*' Exp .                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)

	int            reduce using rule 14
	'+'            reduce using rule 14
	sum            reduce using rule 14
	'-'            reduce using rule 14
	sub            reduce using rule 14
	'*'            reduce using rule 14
	mult           reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	let            shift, and enter state 10
	in             reduce using rule 14
	var            reduce using rule 14
	lam            shift, and enter state 12
	set            reduce using rule 14
	%eof           reduce using rule 14

	Integer        goto state 3
	Exp            goto state 24

State 31

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp '-' Exp .                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)

	int            reduce using rule 12
	'+'            reduce using rule 12
	sum            reduce using rule 12
	'-'            reduce using rule 12
	sub            reduce using rule 12
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	let            shift, and enter state 10
	in             reduce using rule 12
	var            reduce using rule 12
	lam            shift, and enter state 12
	set            reduce using rule 12
	%eof           reduce using rule 12

	Integer        goto state 3
	Exp            goto state 24

State 32

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp '+' Exp .                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)

	int            reduce using rule 10
	'+'            reduce using rule 10
	sum            reduce using rule 10
	'-'            reduce using rule 10
	sub            reduce using rule 10
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            reduce using rule 10
	')'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	let            shift, and enter state 10
	in             reduce using rule 10
	var            reduce using rule 10
	lam            shift, and enter state 12
	set            reduce using rule 10
	%eof           reduce using rule 10

	Integer        goto state 3
	Exp            goto state 24

State 33

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> sum '(' Exp . ',' Exp ')'                    (rule 11)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	','            shift, and enter state 50
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 34

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> sub '(' Exp . ',' Exp ')'                    (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	','            shift, and enter state 49
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 35

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> mult '(' Exp . ',' Exp ')'                   (rule 15)
	Exp -> Exp . Exp                                    (rule 16)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	','            shift, and enter state 48
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 36

	Exp -> '(' Exp ')' .                                (rule 7)

	int            reduce using rule 7
	'+'            reduce using rule 7
	sum            reduce using rule 7
	'-'            reduce using rule 7
	sub            reduce using rule 7
	'*'            reduce using rule 7
	mult           reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	let            reduce using rule 7
	in             reduce using rule 7
	var            reduce using rule 7
	lam            reduce using rule 7
	set            reduce using rule 7
	%eof           reduce using rule 7


State 37

	Exp -> let var '=' . Exp in Exp                     (rule 18)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 47

State 38

	Exp -> lam var '(' . Exp ')'                        (rule 17)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 46

State 39

	MetaExp -> set inStreamCount '=' . int              (rule 3)

	int            shift, and enter state 45


State 40

	MetaExp -> set pastCount '=' . int                  (rule 4)

	int            shift, and enter state 44


State 41

	MetaExp -> set past '=' . PastExp                   (rule 2)

	'['            shift, and enter state 43

	PastExp        goto state 42

State 42

	MetaExp -> set past '=' PastExp .                   (rule 2)

	int            reduce using rule 2
	sum            reduce using rule 2
	sub            reduce using rule 2
	mult           reduce using rule 2
	'('            reduce using rule 2
	let            reduce using rule 2
	var            reduce using rule 2
	lam            reduce using rule 2
	set            reduce using rule 2
	%eof           reduce using rule 2


State 43

	PastExp -> '[' . MappingExps ']'                    (rule 19)

	'('            shift, and enter state 58

	MappingExps    goto state 56
	MappingExp     goto state 57

State 44

	MetaExp -> set pastCount '=' int .                  (rule 4)

	int            reduce using rule 4
	sum            reduce using rule 4
	sub            reduce using rule 4
	mult           reduce using rule 4
	'('            reduce using rule 4
	let            reduce using rule 4
	var            reduce using rule 4
	lam            reduce using rule 4
	set            reduce using rule 4
	%eof           reduce using rule 4


State 45

	MetaExp -> set inStreamCount '=' int .              (rule 3)

	int            reduce using rule 3
	sum            reduce using rule 3
	sub            reduce using rule 3
	mult           reduce using rule 3
	'('            reduce using rule 3
	let            reduce using rule 3
	var            reduce using rule 3
	lam            reduce using rule 3
	set            reduce using rule 3
	%eof           reduce using rule 3


State 46

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)
	Exp -> lam var '(' Exp . ')'                        (rule 17)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	')'            shift, and enter state 55
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 47

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)
	Exp -> let var '=' Exp . in Exp                     (rule 18)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	in             shift, and enter state 54
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 48

	Exp -> mult '(' Exp ',' . Exp ')'                   (rule 15)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 53

State 49

	Exp -> sub '(' Exp ',' . Exp ')'                    (rule 13)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 52

State 50

	Exp -> sum '(' Exp ',' . Exp ')'                    (rule 11)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 51

State 51

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> sum '(' Exp ',' Exp . ')'                    (rule 11)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	')'            shift, and enter state 65
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 52

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> sub '(' Exp ',' Exp . ')'                    (rule 13)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	')'            shift, and enter state 64
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 53

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> mult '(' Exp ',' Exp . ')'                   (rule 15)
	Exp -> Exp . Exp                                    (rule 16)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	')'            shift, and enter state 63
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 54

	Exp -> let var '=' Exp in . Exp                     (rule 18)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 62

State 55

	Exp -> lam var '(' Exp ')' .                        (rule 17)

	int            reduce using rule 17
	'+'            reduce using rule 17
	sum            reduce using rule 17
	'-'            reduce using rule 17
	sub            reduce using rule 17
	'*'            reduce using rule 17
	mult           reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	let            reduce using rule 17
	in             reduce using rule 17
	var            reduce using rule 17
	lam            reduce using rule 17
	set            reduce using rule 17
	%eof           reduce using rule 17


State 56

	PastExp -> '[' MappingExps . ']'                    (rule 19)
	MappingExps -> MappingExps . ',' MappingExp         (rule 20)

	']'            shift, and enter state 60
	','            shift, and enter state 61


State 57

	MappingExps -> MappingExp .                         (rule 21)

	']'            reduce using rule 21
	','            reduce using rule 21


State 58

	MappingExp -> '(' . '[' Exps ']' ',' '[' Exps ']' ')'    (rule 22)

	'['            shift, and enter state 59


State 59

	MappingExp -> '(' '[' . Exps ']' ',' '[' Exps ']' ')'    (rule 22)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 67
	Exps           goto state 68

State 60

	PastExp -> '[' MappingExps ']' .                    (rule 19)

	int            reduce using rule 19
	sum            reduce using rule 19
	sub            reduce using rule 19
	mult           reduce using rule 19
	'('            reduce using rule 19
	let            reduce using rule 19
	var            reduce using rule 19
	lam            reduce using rule 19
	set            reduce using rule 19
	%eof           reduce using rule 19


State 61

	MappingExps -> MappingExps ',' . MappingExp         (rule 20)

	'('            shift, and enter state 58

	MappingExp     goto state 66

State 62

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)
	Exp -> let var '=' Exp in Exp .                     (rule 18)

	int            fail
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            fail
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	let            shift, and enter state 10
	in             reduce using rule 18
	var            fail
	lam            shift, and enter state 12
	set            reduce using rule 18
	%eof           reduce using rule 18

	Integer        goto state 3
	Exp            goto state 24

State 63

	Exp -> mult '(' Exp ',' Exp ')' .                   (rule 15)

	int            reduce using rule 15
	'+'            reduce using rule 15
	sum            reduce using rule 15
	'-'            reduce using rule 15
	sub            reduce using rule 15
	'*'            reduce using rule 15
	mult           reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	let            reduce using rule 15
	in             reduce using rule 15
	var            reduce using rule 15
	lam            reduce using rule 15
	set            reduce using rule 15
	%eof           reduce using rule 15


State 64

	Exp -> sub '(' Exp ',' Exp ')' .                    (rule 13)

	int            reduce using rule 13
	'+'            reduce using rule 13
	sum            reduce using rule 13
	'-'            reduce using rule 13
	sub            reduce using rule 13
	'*'            reduce using rule 13
	mult           reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	let            reduce using rule 13
	in             reduce using rule 13
	var            reduce using rule 13
	lam            reduce using rule 13
	set            reduce using rule 13
	%eof           reduce using rule 13


State 65

	Exp -> sum '(' Exp ',' Exp ')' .                    (rule 11)

	int            reduce using rule 11
	'+'            reduce using rule 11
	sum            reduce using rule 11
	'-'            reduce using rule 11
	sub            reduce using rule 11
	'*'            reduce using rule 11
	mult           reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	let            reduce using rule 11
	in             reduce using rule 11
	var            reduce using rule 11
	lam            reduce using rule 11
	set            reduce using rule 11
	%eof           reduce using rule 11


State 66

	MappingExps -> MappingExps ',' MappingExp .         (rule 20)

	']'            reduce using rule 20
	','            reduce using rule 20


State 67

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)
	Exps -> Exp .                                       (rule 24)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	']'            reduce using rule 24
	','            reduce using rule 24
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 68

	MappingExp -> '(' '[' Exps . ']' ',' '[' Exps ']' ')'    (rule 22)
	Exps -> Exps . ',' Exp                              (rule 23)

	']'            shift, and enter state 69
	','            shift, and enter state 70


State 69

	MappingExp -> '(' '[' Exps ']' . ',' '[' Exps ']' ')'    (rule 22)

	','            shift, and enter state 72


State 70

	Exps -> Exps ',' . Exp                              (rule 23)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 71

State 71

	Exp -> Exp . '+' Exp                                (rule 10)
	Exp -> Exp . '-' Exp                                (rule 12)
	Exp -> Exp . '*' Exp                                (rule 14)
	Exp -> Exp . Exp                                    (rule 16)
	Exps -> Exps ',' Exp .                              (rule 23)

	int            shift, and enter state 5
	'+'            shift, and enter state 25
	sum            shift, and enter state 6
	'-'            shift, and enter state 26
	sub            shift, and enter state 7
	'*'            shift, and enter state 27
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	']'            reduce using rule 23
	','            reduce using rule 23
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 24

State 72

	MappingExp -> '(' '[' Exps ']' ',' . '[' Exps ']' ')'    (rule 22)

	'['            shift, and enter state 73


State 73

	MappingExp -> '(' '[' Exps ']' ',' '[' . Exps ']' ')'    (rule 22)

	int            shift, and enter state 5
	sum            shift, and enter state 6
	sub            shift, and enter state 7
	mult           shift, and enter state 8
	'('            shift, and enter state 9
	let            shift, and enter state 10
	var            shift, and enter state 11
	lam            shift, and enter state 12

	Integer        goto state 3
	Exp            goto state 67
	Exps           goto state 74

State 74

	MappingExp -> '(' '[' Exps ']' ',' '[' Exps . ']' ')'    (rule 22)
	Exps -> Exps . ',' Exp                              (rule 23)

	']'            shift, and enter state 75
	','            shift, and enter state 70


State 75

	MappingExp -> '(' '[' Exps ']' ',' '[' Exps ']' . ')'    (rule 22)

	')'            shift, and enter state 76


State 76

	MappingExp -> '(' '[' Exps ']' ',' '[' Exps ']' ')' .    (rule 22)

	']'            reduce using rule 22
	','            reduce using rule 22


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 25
Number of terminals: 21
Number of non-terminals: 9
Number of states: 77

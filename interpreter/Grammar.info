-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------

state 3 contains 8 shift/reduce conflicts.
state 14 contains 8 shift/reduce conflicts.
state 16 contains 8 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Exp                            (0)
	Exp -> Meta Meta Meta                              (1)
	Exp -> IntExprs                                    (2)
	Meta -> set past '=' '[' MappingExps ']'           (3)
	Meta -> set pastCnt '=' int                        (4)
	Meta -> set SCount '=' int                         (5)
	Meta -> Expr                                       (6)
	Expr -> '(' Expr ')'                               (7)
	Expr -> int                                        (8)
	Expr -> var                                        (9)
	Expr -> Expr '+' Expr                              (10)
	Expr -> '+' '(' Expr ',' Expr ')'                  (11)
	Expr -> Expr '-' Expr                              (12)
	Expr -> '-' '(' Expr ',' Expr ')'                  (13)
	Expr -> Expr '*' Expr                              (14)
	Expr -> '*' '(' Expr ',' Expr ')'                  (15)
	Expr -> Expr Expr                                  (16)
	Expr -> lam var '(' Expr ')'                       (17)
	Expr -> let var '=' Expr in Expr                   (18)
	MappingExps -> MappingExps ',' MappingExp          (19)
	MappingExps -> MappingExp                          (20)
	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs ']' ')'   (21)
	Exprs -> Exprs ',' Expr                            (22)
	Exprs -> Expr                                      (23)
	IntExprs -> Expr                                   (24)
	IntExprs -> IntExprs Expr                          (25)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt _ $$ }
	'='            { TokenEq _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'['            { TokenLParenSq _ }
	']'            { TokenRParenSq _ }
	','            { TokenSeq _ }
	let            { TokenLet _ }
	in             { TokenIn _ }
	var            { TokenVar _ $$ }
	lam            { TokenLam _ }
	set            { TokenSet _ }
	past           { TokenPast _ }
	pastCnt        { TokenPastCount _ }
	SCount         { TokenInStreamCount _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Exp             rules 1, 2
	Meta            rules 3, 4, 5, 6
	Expr            rules 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
	MappingExps     rules 19, 20
	MappingExp      rule  21
	Exprs           rules 22, 23
	IntExprs        rules 24, 25

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	set            shift, and enter state 12

	Exp            goto state 13
	Meta           goto state 2
	Expr           goto state 14
	IntExprs       goto state 15

State 1


	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	set            shift, and enter state 12

	Meta           goto state 2
	Expr           goto state 3

State 2

	Exp -> Meta . Meta Meta                             (rule 1)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	set            shift, and enter state 12

	Meta           goto state 30
	Expr           goto state 3

State 3

	Meta -> Expr .                                      (rule 6)
	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
			(reduce using rule 6)

	'+'            shift, and enter state 18
			(reduce using rule 6)

	'-'            shift, and enter state 19
			(reduce using rule 6)

	'*'            shift, and enter state 20
			(reduce using rule 6)

	'('            shift, and enter state 8
			(reduce using rule 6)

	let            shift, and enter state 9
			(reduce using rule 6)

	var            shift, and enter state 10
			(reduce using rule 6)

	lam            shift, and enter state 11
			(reduce using rule 6)

	set            reduce using rule 6
	%eof           reduce using rule 6

	Expr           goto state 17

State 4

	Expr -> int .                                       (rule 8)

	int            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	let            reduce using rule 8
	in             reduce using rule 8
	var            reduce using rule 8
	lam            reduce using rule 8
	set            reduce using rule 8
	%eof           reduce using rule 8


State 5

	Expr -> '+' . '(' Expr ',' Expr ')'                 (rule 11)

	'('            shift, and enter state 29


State 6

	Expr -> '-' . '(' Expr ',' Expr ')'                 (rule 13)

	'('            shift, and enter state 28


State 7

	Expr -> '*' . '(' Expr ',' Expr ')'                 (rule 15)

	'('            shift, and enter state 27


State 8

	Expr -> '(' . Expr ')'                              (rule 7)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 26

State 9

	Expr -> let . var '=' Expr in Expr                  (rule 18)

	var            shift, and enter state 25


State 10

	Expr -> var .                                       (rule 9)

	int            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	let            reduce using rule 9
	in             reduce using rule 9
	var            reduce using rule 9
	lam            reduce using rule 9
	set            reduce using rule 9
	%eof           reduce using rule 9


State 11

	Expr -> lam . var '(' Expr ')'                      (rule 17)

	var            shift, and enter state 24


State 12

	Meta -> set . past '=' '[' MappingExps ']'          (rule 3)
	Meta -> set . pastCnt '=' int                       (rule 4)
	Meta -> set . SCount '=' int                        (rule 5)

	past           shift, and enter state 21
	pastCnt        shift, and enter state 22
	SCount         shift, and enter state 23


State 13

	%start_parseCalc -> Exp .                           (rule 0)

	%eof           accept


State 14

	Meta -> Expr .                                      (rule 6)
	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)
	IntExprs -> Expr .                                  (rule 24)

	int            shift, and enter state 4
			(reduce using rule 24)
			(reduce using rule 6)

	'+'            shift, and enter state 18
			(reduce using rule 24)
			(reduce using rule 6)

	'-'            shift, and enter state 19
			(reduce using rule 24)
			(reduce using rule 6)

	'*'            shift, and enter state 20
			(reduce using rule 24)
			(reduce using rule 6)

	'('            shift, and enter state 8
			(reduce using rule 24)
			(reduce using rule 6)

	let            shift, and enter state 9
			(reduce using rule 24)
			(reduce using rule 6)

	var            shift, and enter state 10
			(reduce using rule 24)
			(reduce using rule 6)

	lam            shift, and enter state 11
			(reduce using rule 24)
			(reduce using rule 6)

	set            reduce using rule 6
	%eof           reduce using rule 24

	Expr           goto state 17

State 15

	Exp -> IntExprs .                                   (rule 2)
	IntExprs -> IntExprs . Expr                         (rule 25)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	%eof           reduce using rule 2

	Expr           goto state 16

State 16

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)
	IntExprs -> IntExprs Expr .                         (rule 25)

	int            shift, and enter state 4
			(reduce using rule 25)

	'+'            shift, and enter state 18
			(reduce using rule 25)

	'-'            shift, and enter state 19
			(reduce using rule 25)

	'*'            shift, and enter state 20
			(reduce using rule 25)

	'('            shift, and enter state 8
			(reduce using rule 25)

	let            shift, and enter state 9
			(reduce using rule 25)

	var            shift, and enter state 10
			(reduce using rule 25)

	lam            shift, and enter state 11
			(reduce using rule 25)

	%eof           reduce using rule 25

	Expr           goto state 17

State 17

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)
	Expr -> Expr Expr .                                 (rule 16)

	int            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	let            reduce using rule 16
	in             reduce using rule 16
	var            reduce using rule 16
	lam            reduce using rule 16
	set            reduce using rule 16
	%eof           reduce using rule 16

	Expr           goto state 17

State 18

	Expr -> Expr '+' . Expr                             (rule 10)
	Expr -> '+' . '(' Expr ',' Expr ')'                 (rule 11)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 46
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 45

State 19

	Expr -> Expr '-' . Expr                             (rule 12)
	Expr -> '-' . '(' Expr ',' Expr ')'                 (rule 13)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 44
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 43

State 20

	Expr -> Expr '*' . Expr                             (rule 14)
	Expr -> '*' . '(' Expr ',' Expr ')'                 (rule 15)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 42
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 41

State 21

	Meta -> set past . '=' '[' MappingExps ']'          (rule 3)

	'='            shift, and enter state 40


State 22

	Meta -> set pastCnt . '=' int                       (rule 4)

	'='            shift, and enter state 39


State 23

	Meta -> set SCount . '=' int                        (rule 5)

	'='            shift, and enter state 38


State 24

	Expr -> lam var . '(' Expr ')'                      (rule 17)

	'('            shift, and enter state 37


State 25

	Expr -> let var . '=' Expr in Expr                  (rule 18)

	'='            shift, and enter state 36


State 26

	Expr -> '(' Expr . ')'                              (rule 7)
	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	')'            shift, and enter state 35
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 27

	Expr -> '*' '(' . Expr ',' Expr ')'                 (rule 15)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 34

State 28

	Expr -> '-' '(' . Expr ',' Expr ')'                 (rule 13)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 33

State 29

	Expr -> '+' '(' . Expr ',' Expr ')'                 (rule 11)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 32

State 30

	Exp -> Meta Meta . Meta                             (rule 1)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11
	set            shift, and enter state 12

	Meta           goto state 31
	Expr           goto state 3

State 31

	Exp -> Meta Meta Meta .                             (rule 1)

	%eof           reduce using rule 1


State 32

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> '+' '(' Expr . ',' Expr ')'                 (rule 11)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	','            shift, and enter state 57
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 33

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> '-' '(' Expr . ',' Expr ')'                 (rule 13)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	','            shift, and enter state 56
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 34

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> '*' '(' Expr . ',' Expr ')'                 (rule 15)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	','            shift, and enter state 55
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 35

	Expr -> '(' Expr ')' .                              (rule 7)

	int            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	let            reduce using rule 7
	in             reduce using rule 7
	var            reduce using rule 7
	lam            reduce using rule 7
	set            reduce using rule 7
	%eof           reduce using rule 7


State 36

	Expr -> let var '=' . Expr in Expr                  (rule 18)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 54

State 37

	Expr -> lam var '(' . Expr ')'                      (rule 17)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 53

State 38

	Meta -> set SCount '=' . int                        (rule 5)

	int            shift, and enter state 52


State 39

	Meta -> set pastCnt '=' . int                       (rule 4)

	int            shift, and enter state 51


State 40

	Meta -> set past '=' . '[' MappingExps ']'          (rule 3)

	'['            shift, and enter state 50


State 41

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr '*' Expr .                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	let            shift, and enter state 9
	in             reduce using rule 14
	var            reduce using rule 14
	lam            shift, and enter state 11
	set            reduce using rule 14
	%eof           reduce using rule 14

	Expr           goto state 17

State 42

	Expr -> '(' . Expr ')'                              (rule 7)
	Expr -> '*' '(' . Expr ',' Expr ')'                 (rule 15)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 49

State 43

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr '-' Expr .                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            shift, and enter state 20
	'('            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	let            shift, and enter state 9
	in             reduce using rule 12
	var            reduce using rule 12
	lam            shift, and enter state 11
	set            reduce using rule 12
	%eof           reduce using rule 12

	Expr           goto state 17

State 44

	Expr -> '(' . Expr ')'                              (rule 7)
	Expr -> '-' '(' . Expr ',' Expr ')'                 (rule 13)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 48

State 45

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr '+' Expr .                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            shift, and enter state 20
	'('            reduce using rule 10
	')'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	let            shift, and enter state 9
	in             reduce using rule 10
	var            reduce using rule 10
	lam            shift, and enter state 11
	set            reduce using rule 10
	%eof           reduce using rule 10

	Expr           goto state 17

State 46

	Expr -> '(' . Expr ')'                              (rule 7)
	Expr -> '+' '(' . Expr ',' Expr ')'                 (rule 11)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 47

State 47

	Expr -> '(' Expr . ')'                              (rule 7)
	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> '+' '(' Expr . ',' Expr ')'                 (rule 11)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	')'            shift, and enter state 35
	','            shift, and enter state 57
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 48

	Expr -> '(' Expr . ')'                              (rule 7)
	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> '-' '(' Expr . ',' Expr ')'                 (rule 13)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	')'            shift, and enter state 35
	','            shift, and enter state 56
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 49

	Expr -> '(' Expr . ')'                              (rule 7)
	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> '*' '(' Expr . ',' Expr ')'                 (rule 15)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	')'            shift, and enter state 35
	','            shift, and enter state 55
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 50

	Meta -> set past '=' '[' . MappingExps ']'          (rule 3)

	'('            shift, and enter state 65

	MappingExps    goto state 63
	MappingExp     goto state 64

State 51

	Meta -> set pastCnt '=' int .                       (rule 4)

	int            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'('            reduce using rule 4
	let            reduce using rule 4
	var            reduce using rule 4
	lam            reduce using rule 4
	set            reduce using rule 4
	%eof           reduce using rule 4


State 52

	Meta -> set SCount '=' int .                        (rule 5)

	int            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'('            reduce using rule 5
	let            reduce using rule 5
	var            reduce using rule 5
	lam            reduce using rule 5
	set            reduce using rule 5
	%eof           reduce using rule 5


State 53

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)
	Expr -> lam var '(' Expr . ')'                      (rule 17)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	')'            shift, and enter state 62
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 54

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)
	Expr -> let var '=' Expr . in Expr                  (rule 18)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	let            shift, and enter state 9
	in             shift, and enter state 61
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 55

	Expr -> '*' '(' Expr ',' . Expr ')'                 (rule 15)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 60

State 56

	Expr -> '-' '(' Expr ',' . Expr ')'                 (rule 13)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 59

State 57

	Expr -> '+' '(' Expr ',' . Expr ')'                 (rule 11)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 58

State 58

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> '+' '(' Expr ',' Expr . ')'                 (rule 11)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	')'            shift, and enter state 72
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 59

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> '-' '(' Expr ',' Expr . ')'                 (rule 13)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	')'            shift, and enter state 71
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 60

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> '*' '(' Expr ',' Expr . ')'                 (rule 15)
	Expr -> Expr . Expr                                 (rule 16)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	')'            shift, and enter state 70
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 61

	Expr -> let var '=' Expr in . Expr                  (rule 18)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 69

State 62

	Expr -> lam var '(' Expr ')' .                      (rule 17)

	int            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	let            reduce using rule 17
	in             reduce using rule 17
	var            reduce using rule 17
	lam            reduce using rule 17
	set            reduce using rule 17
	%eof           reduce using rule 17


State 63

	Meta -> set past '=' '[' MappingExps . ']'          (rule 3)
	MappingExps -> MappingExps . ',' MappingExp         (rule 19)

	']'            shift, and enter state 67
	','            shift, and enter state 68


State 64

	MappingExps -> MappingExp .                         (rule 20)

	']'            reduce using rule 20
	','            reduce using rule 20


State 65

	MappingExp -> '(' . '[' Exprs ']' ',' '[' Exprs ']' ')'    (rule 21)

	'['            shift, and enter state 66


State 66

	MappingExp -> '(' '[' . Exprs ']' ',' '[' Exprs ']' ')'    (rule 21)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 74
	Exprs          goto state 75

State 67

	Meta -> set past '=' '[' MappingExps ']' .          (rule 3)

	int            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'('            reduce using rule 3
	let            reduce using rule 3
	var            reduce using rule 3
	lam            reduce using rule 3
	set            reduce using rule 3
	%eof           reduce using rule 3


State 68

	MappingExps -> MappingExps ',' . MappingExp         (rule 19)

	'('            shift, and enter state 65

	MappingExp     goto state 73

State 69

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)
	Expr -> let var '=' Expr in Expr .                  (rule 18)

	int            fail
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            fail
	')'            reduce using rule 18
	']'            reduce using rule 18
	','            reduce using rule 18
	let            shift, and enter state 9
	in             reduce using rule 18
	var            fail
	lam            shift, and enter state 11
	set            reduce using rule 18
	%eof           reduce using rule 18

	Expr           goto state 17

State 70

	Expr -> '*' '(' Expr ',' Expr ')' .                 (rule 15)

	int            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	let            reduce using rule 15
	in             reduce using rule 15
	var            reduce using rule 15
	lam            reduce using rule 15
	set            reduce using rule 15
	%eof           reduce using rule 15


State 71

	Expr -> '-' '(' Expr ',' Expr ')' .                 (rule 13)

	int            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	let            reduce using rule 13
	in             reduce using rule 13
	var            reduce using rule 13
	lam            reduce using rule 13
	set            reduce using rule 13
	%eof           reduce using rule 13


State 72

	Expr -> '+' '(' Expr ',' Expr ')' .                 (rule 11)

	int            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	let            reduce using rule 11
	in             reduce using rule 11
	var            reduce using rule 11
	lam            reduce using rule 11
	set            reduce using rule 11
	%eof           reduce using rule 11


State 73

	MappingExps -> MappingExps ',' MappingExp .         (rule 19)

	']'            reduce using rule 19
	','            reduce using rule 19


State 74

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)
	Exprs -> Expr .                                     (rule 23)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	']'            reduce using rule 23
	','            reduce using rule 23
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 75

	MappingExp -> '(' '[' Exprs . ']' ',' '[' Exprs ']' ')'    (rule 21)
	Exprs -> Exprs . ',' Expr                           (rule 22)

	']'            shift, and enter state 76
	','            shift, and enter state 77


State 76

	MappingExp -> '(' '[' Exprs ']' . ',' '[' Exprs ']' ')'    (rule 21)

	','            shift, and enter state 79


State 77

	Exprs -> Exprs ',' . Expr                           (rule 22)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 78

State 78

	Expr -> Expr . '+' Expr                             (rule 10)
	Expr -> Expr . '-' Expr                             (rule 12)
	Expr -> Expr . '*' Expr                             (rule 14)
	Expr -> Expr . Expr                                 (rule 16)
	Exprs -> Exprs ',' Expr .                           (rule 22)

	int            shift, and enter state 4
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'('            shift, and enter state 8
	']'            reduce using rule 22
	','            reduce using rule 22
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 17

State 79

	MappingExp -> '(' '[' Exprs ']' ',' . '[' Exprs ']' ')'    (rule 21)

	'['            shift, and enter state 80


State 80

	MappingExp -> '(' '[' Exprs ']' ',' '[' . Exprs ']' ')'    (rule 21)

	int            shift, and enter state 4
	'+'            shift, and enter state 5
	'-'            shift, and enter state 6
	'*'            shift, and enter state 7
	'('            shift, and enter state 8
	let            shift, and enter state 9
	var            shift, and enter state 10
	lam            shift, and enter state 11

	Expr           goto state 74
	Exprs          goto state 81

State 81

	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs . ']' ')'    (rule 21)
	Exprs -> Exprs . ',' Expr                           (rule 22)

	']'            shift, and enter state 82
	','            shift, and enter state 77


State 82

	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs ']' . ')'    (rule 21)

	')'            shift, and enter state 83


State 83

	MappingExp -> '(' '[' Exprs ']' ',' '[' Exprs ']' ')' .    (rule 21)

	']'            reduce using rule 21
	','            reduce using rule 21


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 26
Number of terminals: 18
Number of non-terminals: 8
Number of states: 84
